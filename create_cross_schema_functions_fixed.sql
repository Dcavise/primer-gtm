CREATE OR REPLACE FUNCTION public.query_cross_schema(query_text text, query_params jsonb DEFAULT '[]'::jsonb) RETURNS SETOF json LANGUAGE plpgsql SECURITY DEFINER AS $function$ DECLARE cleaned_query text; i integer; param_value text; formatted_query text; result json; BEGIN cleaned_query := lower(query_text); IF position(';' in cleaned_query) > 0 OR position('--' in cleaned_query) > 0 OR position('/*' in cleaned_query) > 0 OR position('drop ' in cleaned_query) > 0 OR position('truncate ' in cleaned_query) > 0 OR position('delete ' in cleaned_query) > 0 OR position('alter ' in cleaned_query) > 0 OR position('grant ' in cleaned_query) > 0 OR position('revoke ' in cleaned_query) > 0 THEN RAISE EXCEPTION 'Invalid query: security check failed'; END IF; formatted_query := query_text; IF jsonb_array_length(query_params) > 0 THEN FOR i IN 0..jsonb_array_length(query_params)-1 LOOP param_value := jsonb_array_element_text(query_params, i); formatted_query := replace(formatted_query, '$' || (i+1)::text, quote_literal(param_value)); END LOOP; END IF; RETURN QUERY EXECUTE formatted_query; EXCEPTION WHEN OTHERS THEN result := json_build_object('error', SQLERRM, 'detail', SQLSTATE, 'query', query_text); RETURN NEXT result; RETURN; END; $function$; COMMENT ON FUNCTION public.query_cross_schema IS 'Execute cross-schema queries between public and salesforce schemas with parameters'; REVOKE ALL ON FUNCTION public.query_cross_schema FROM PUBLIC; GRANT EXECUTE ON FUNCTION public.query_cross_schema TO authenticated; GRANT EXECUTE ON FUNCTION public.query_cross_schema TO service_role;
