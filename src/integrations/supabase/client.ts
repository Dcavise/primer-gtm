
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pudncilureqpzxrxfupr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB1ZG5jaWx1cmVxcHp4cnhmdXByIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExMjM1NTUsImV4cCI6MjA1NjY5OTU1NX0.0lZySUmlC3nQs-62Ka-0rE6d9on3KIAt6U16g4YYpxY";

// Type augmentation for the execute_sql_query RPC function
declare module '@supabase/supabase-js' {
  interface SupabaseClient<Database> {
    rpc(
      fn: 'execute_sql_query' | 'get_weekly_lead_counts' | 'query_salesforce_lead' | string,
      params?: Record<string, any>
    ): any;
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the Supabase client with specific options for headers
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        // Include necessary headers that might be required for cross-schema access
        'x-client-info': 'primer-analytics-dashboard'
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Helper function to check database connectivity to both public and salesforce schemas
export const checkDatabaseConnection = async () => {
  try {
    // First check public schema access
    const publicCheck = await supabase
      .from('campuses')
      .select('count')
      .limit(1);
    
    if (publicCheck.error) {
      console.error("Public schema connectivity check failed:", publicCheck.error);
      return { connected: false, schemas: { public: false, salesforce: false }};
    }
    
    // Then check salesforce schema access
    const salesforceCheck = await supabase.rpc('get_campuses_with_lead_counts', {}).limit(1);
    
    if (salesforceCheck.error) {
      console.error("Salesforce schema connectivity check failed:", salesforceCheck.error);
      return { connected: false, schemas: { public: true, salesforce: false }};
    }
    
    // Both checks passed
    return { connected: true, schemas: { public: true, salesforce: true }};
  } catch (error) {
    console.error("Unexpected error during database connectivity check:", error);
    return { connected: false, schemas: { public: false, salesforce: false }};
  }
};
